from .api import BasePixivAPI as BasePixivAPI
from .utils import PixivError as PixivError
from typing import Any

class AppPixivAPI(BasePixivAPI):
    hosts: str
    def __init__(self, **requests_kwargs) -> None: ...
    def set_api_proxy(self, proxy_hosts: str = ...) -> None: ...
    def no_auth_requests_call(self, method, url, headers: Any | None = ..., params: Any | None = ..., data: Any | None = ..., req_auth: bool = ...): ...
    def parse_result(self, req): ...
    @classmethod
    def format_bool(cls, bool_value): ...
    @classmethod
    def parse_qs(cls, next_url): ...
    def user_detail(self, user_id, filter: str = ..., req_auth: bool = ...): ...
    def user_illusts(self, user_id, type: str = ..., filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def user_bookmarks_illust(self, user_id, restrict: str = ..., filter: str = ..., max_bookmark_id: Any | None = ..., tag: Any | None = ..., req_auth: bool = ...): ...
    def user_related(self, seed_user_id, filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def illust_follow(self, restrict: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def illust_detail(self, illust_id, req_auth: bool = ...): ...
    def illust_comments(self, illust_id, offset: Any | None = ..., include_total_comments: Any | None = ..., req_auth: bool = ...): ...
    def illust_related(self, illust_id, filter: str = ..., seed_illust_ids: Any | None = ..., offset: Any | None = ..., viewed: Any | None = ..., req_auth: bool = ...): ...
    def illust_recommended(self, content_type: str = ..., include_ranking_label: bool = ..., filter: str = ..., max_bookmark_id_for_recommend: Any | None = ..., min_bookmark_id_for_recent_illust: Any | None = ..., offset: Any | None = ..., include_ranking_illusts: Any | None = ..., bookmark_illust_ids: Any | None = ..., include_privacy_policy: Any | None = ..., viewed: Any | None = ..., req_auth: bool = ...): ...
    def illust_ranking(self, mode: str = ..., filter: str = ..., date: Any | None = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def trending_tags_illust(self, filter: str = ..., req_auth: bool = ...): ...
    def search_illust(self, word, search_target: str = ..., sort: str = ..., duration: Any | None = ..., start_date: Any | None = ..., end_date: Any | None = ..., filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def search_novel(self, word, search_target: str = ..., sort: str = ..., merge_plain_keyword_results: str = ..., include_translated_tag_results: str = ..., start_date: Any | None = ..., end_date: Any | None = ..., filter: Any | None = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def search_user(self, word, sort: str = ..., duration: Any | None = ..., filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def illust_bookmark_detail(self, illust_id, req_auth: bool = ...): ...
    def illust_bookmark_add(self, illust_id, restrict: str = ..., tags: Any | None = ..., req_auth: bool = ...): ...
    def illust_bookmark_delete(self, illust_id, req_auth: bool = ...): ...
    def user_follow_add(self, user_id, restrict: str = ..., req_auth: bool = ...): ...
    def user_follow_delete(self, user_id, req_auth: bool = ...): ...
    def user_bookmark_tags_illust(self, restrict: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def user_following(self, user_id, restrict: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def user_follower(self, user_id, filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def user_mypixiv(self, user_id, offset: Any | None = ..., req_auth: bool = ...): ...
    def user_list(self, user_id, filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def ugoira_metadata(self, illust_id, req_auth: bool = ...): ...
    def user_novels(self, user_id, filter: str = ..., offset: Any | None = ..., req_auth: bool = ...): ...
    def novel_series(self, series_id, filter: str = ..., last_order: Any | None = ..., req_auth: bool = ...): ...
    def novel_detail(self, novel_id, req_auth: bool = ...): ...
    def novel_text(self, novel_id, req_auth: bool = ...): ...
    def showcase_article(self, showcase_id): ...
