from .api import BasePixivAPI as BasePixivAPI
from .utils import PixivError as PixivError
from typing import Any

class PixivAPI(BasePixivAPI):
    def __init__(self, **requests_kwargs) -> None: ...
    def auth_requests_call(self, method, url, headers: Any | None = ..., params: Any | None = ..., data: Any | None = ...): ...
    @classmethod
    def parse_result(cls, req): ...
    def bad_words(self): ...
    def works(self, illust_id, include_sanity_level: bool = ...): ...
    def users(self, author_id): ...
    def me_feeds(self, show_r18: int = ..., max_id: Any | None = ...): ...
    def me_favorite_works(self, page: int = ..., per_page: int = ..., publicity: str = ..., image_sizes=...): ...
    def me_favorite_works_add(self, work_id, publicity: str = ...): ...
    def me_favorite_works_delete(self, ids, publicity: str = ...): ...
    def me_following_works(self, page: int = ..., per_page: int = ..., image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
    def me_following(self, page: int = ..., per_page: int = ..., publicity: str = ...): ...
    def me_favorite_users_follow(self, user_id, publicity: str = ...): ...
    def me_favorite_users_unfollow(self, user_ids, publicity: str = ...): ...
    def users_works(self, author_id, page: int = ..., per_page: int = ..., image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
    def users_favorite_works(self, author_id, page: int = ..., per_page: int = ..., image_sizes=..., include_sanity_level: bool = ...): ...
    def users_feeds(self, author_id, show_r18: int = ..., max_id: Any | None = ...): ...
    def users_following(self, author_id, page: int = ..., per_page: int = ...): ...
    def ranking(self, ranking_type: str = ..., mode: str = ..., page: int = ..., per_page: int = ..., date: Any | None = ..., image_sizes=..., profile_image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
    def ranking_all(self, mode: str = ..., page: int = ..., per_page: int = ..., date: Any | None = ..., image_sizes=..., profile_image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
    def search_works(self, query, page: int = ..., per_page: int = ..., mode: str = ..., period: str = ..., order: str = ..., sort: str = ..., types=..., image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
    def latest_works(self, page: int = ..., per_page: int = ..., image_sizes=..., profile_image_sizes=..., include_stats: bool = ..., include_sanity_level: bool = ...): ...
